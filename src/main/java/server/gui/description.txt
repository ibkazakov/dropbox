Работы по dropbox server GUI.
Суть данных работ состояла в том, чтобы написать графический интерфейс, управляющий сервером.
Класс, запускающий GUI: server.gui.ServerGUI
I. Описание функционала.

Четыре вкладки окна, соответвующие аспектам работы сервера:
A. Start.
Эта вкладка управляет выбором параметров сервера и его запуском.
Имеется 3 параметра: a.сетевой порт включения, b.путь к хранилищу файлов serverFolder, c.путь к базе данных
SQLLite3, хранящей таблицу с столбцами clientName, password
К b,c реализованно заполнение их посредством JavaFX DirectoryChooser, FileChooser.
В вкладке имеется две кнопки: Start, Stop. в любой момент времени для нажатия доступна одна и только одна из них.
Кнопка Start запускает ServerThread, передая ему параметры сервера. Кнопка Stop его останавливает.

Б. Connections.
Таблица подключенных соединений. Содержит два столбца: remoteAddress, clientName.
Когда некий клиент подключается, в этой таблице создается запись с remoteAddress подключенного клиента,
но с clientName = null.
При прохождении авторизации подключенного клиента в его ячейку clientName вносится имя, под которым он авторизован.
Два клиента не могут пройти аутентифицацию под одним и тем же именем.
Также вкладка имеет TextField и кнопку disconnect. При нажатии на строку таблицы поле TextField запоолняется содержимым
столбца remoteAddress выбранной строки. При нажатии на disconnect сервер отключает соответвующего клиента.

В. Clients
Таблица клиентов из привязанной БД, оборудованная функцоналом для CRUD операций.
Содержит столбцы clientName, password.
Имеется также
1. Button renew_table. Запросить из БД лежащую там версию таблицы.
2. Button createClient. Создать нового клиента с параметрами clientName, password из лежащих слева текствовых полей.
3. Button updatePassword. Обновить пароль. clientName, newPassword из лежащих слева текствовых полей.
4. Button deleteClient. Удалить клиента. clientName из лежащего слева текстового поля.
При удалении клиента, если он оказался подключен, он отключается.
Автозаполнение TextField при кликах на строки - аналогично.
Становится доступной для действий при запущенном ServerThread.

Создание и удаление клиентов производит изменения в директории serverFolder.
1. При создании клиента создается директория в serverFolder с именем clientName.
Однако, она может уже существовать. Если она уже существует, то ничего не происходит, и следовательно всё содержимое
директории привязывается к новосозданному клиенту.
Если сушествует файл с таким именем, то он удаляется, а далее создается пустая директория.
2. При удалении клиента директория clientName удаляется со всем её содержимым, если она сущетсвует (deltree)


Г. Log
Button clear
TextArea для предоставления туда вывода сообщений-логов.

II. Контроллеры.

Реализовано изменение размеров окна при переключении между вкладками.
4 вкладкам соответствуют 4 fxml файла: start.fxml, connected.fxml, clients.fxml. (resourses.GUI_FXML.server)
а также 4 контроллера: ClientsController, ConnectedController, LogController, StartController. (gui.controllers)

Отдельно нужно сказать о классе server.gui.ActionsGUI. Он содержит только статические поля и статические методы.
Поля: primaryStage, start, connected, clients, log, dataBase
primareStage - это ссылка на JAVAFX окно. Инициализуется посредством сеттера из ServerGUI
start, connected, clients, log - ссылки на контроллеры. Инициалируется в соотвествующих контроллерах: они передают в
сеттер ссылку на себя.
dataBase - ссылка на объет DataBase, управляющий базой данных. Ставится из StartContoller, который создает по полученному
dbPath объект DataBase.

Методы, содержащиеся в данном классе - это разнообразные действия, которые "выполняет GUI как целое". Они вызываеются
внутри кода самого GUI, так и внутри ServerThread. (т.е. это "глобальные перемнные и глобальные методы")

В класс AuthAccepter внесено изменение: спрашивать checkPassword у ActionsGUI. а посредством него у самой БД.

III. База данных
Достук к БД SQLLite реализован в server.database.DataBase. Класс представляет собой обертку над databasePath.